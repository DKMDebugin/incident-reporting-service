from django.db import models
# from django.core.exceptions import ObjectDoesNotExist
from django_mysql.models import ListCharField
from rest_framework import status

from .managers import DefinitionManager, ProxyManager
from api.utilities import upload_file_path



# Create your models here.
class Frequency(models.Model):
    """stores frequency of sending out reports"""
    name = models.CharField(max_length=100, default='')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

class Type(models.Model):
    """Types of reports"""
    name = models.CharField(max_length=100, default='')
    uuid = models.CharField(max_length=100, default='') # New field. Uniquely generated by me.
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

    def generateReport(self):
        pass

    def getBugInfo(self):
        pass

    def getIssueInfo(self):
        pass

class Definition(models.Model):
    """Bug report definition"""
    frequency = models.ForeignKey('Frequency', on_delete=models.CASCADE)
    type = models.ForeignKey('Type', on_delete=models.CASCADE)
    project_uuid = models.CharField(max_length=100, default='')
    template_uuid = models.CharField(max_length=100, default='') # new field
    roles = ListCharField(
            base_field=models.CharField(max_length=10),
            max_length=(6 * 11),
            default=[]
            )
    users = ListCharField(
            base_field=models.CharField(max_length=10),
            max_length=(6 * 11),
            default=[]
            )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    next_execution_date = models.DateTimeField(auto_now=True)

    objects = DefinitionManager()


    def __str__(self):
        return f"{self.id}"

    def calculateNextExecDate(self):
        pass

class Report(models.Model):
    """File attachment for  bug definition"""
    definition = models.ForeignKey("Definition", on_delete=models.CASCADE)
    status = models.CharField(max_length=100, default='')
    attachment = models.FileField(upload_to=upload_file_path, blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    _type = models.CharField(max_length=70)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if not self.__class__.__subclasses__():
            self._type = self.__class__.__name__.lower()
        else:
            subclass = [x for x in self.__class__.__subclasses__() if x.__name__.lower() == self._type]
            if subclass:
                self.__class__ = subclass[0]
            else:
                self._type = self.__class__.__name__.lower()

    def __str__(self):
        return f"{self.id}"

    def generateReport(self):
        pass

    def getBugInfo(self):
        pass

    def getIssueInfo(self):
        pass

class BugCreatedReport(Report):
    """A subclass of Report class"""
    objects = ProxyManager()
    class Meta:
        proxy= True
